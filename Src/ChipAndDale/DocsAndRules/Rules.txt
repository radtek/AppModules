Праивила реализации общедоступных сервисов *Service
- в методах классов доступа к БД: *DbAccessor фиксация транзакция, как правило, не должна осуществлятся, исключения могут составлять
специально созданные составные методы, которые используют несколько атомарных операций - например, чобы исключить из контроллера необходимость использования объкта типа Transaction.
- в сервисах (интерфейсах предоставленных в SDK и предназначенных для использования в других сборках) в методах выполняющих операции в БД, необходимо предоставлять параметр isCommit,
для случая, когда предоствляемый функционал может войти в состав транзакции в вызывающем коде;
- в случае наличие в сервисе методов вызова диалога, можно реализовывать параметры isReadOnly, isProcess (обрабатывать внесенные пользователем данные - вставки в БД и пр.) и isCommit.
- методы публичных интерфейсов *Service не должны гасить исключения или показывать окна с сообщениями (за исключением сложных составных команд,
типа вывода окна редактирования и пр.);
- в общем случае, в качестве коллекций должны использоваться или IList<> или BindingCollection<>


Правила логирования:
 - каждый публичный метод в *Service *Controller *Accessor должны логировать свой вызов и значения параметров
   (исключение из правил про логирование параметров - если в методе передает параметры в другой метод, 
    который гарантировано логирует параметры) Опционально логируется завершение метода (особенно если имеет место многошаговая обработка);
- в конструкторе *Service *Controller *Accessor и пр. должнен логироваться факт создания и запрошенные интерфейсы;

Последовательность операций в конструкторах: 
- запрос у ServiceProvider всех необходимых интерфейсов;
- логировнаие факта вызова и состояния запрошеных интерфейсов;  
- проверка входных параметров и генерация исключений;
- остальная инициализация;

Разработка плаггинов:
- в конструкторах нужно избегать инициализации (чтобы при невном создании в MEF не было исключений), ее лучше перенести в метод Init()


Разработка ViewModel:
- здесь должен осуществляться финальный перехват исключений и вывод сообщения пользователю;
- при реализации IView необходимо учитывать, что обработчики OnClose, OnActivate не должны генерировать исключения. В случае, если
в OnClose возникает исключение, его необходимо перехватить и вернуть false, в этом случае форма не будет закрыта и данные не будут утеряны;


Правила размещения сущностей по сборкам ядра Core:
- Центровая сборка Core.SDK не ссылается ни на какие другие (кроме сборок .NET);
- Сборка Core.Utils ссылается только на Core.SDK
